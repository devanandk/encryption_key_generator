package key.generator.ap;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;
import android.content.SharedPreferences;

/***
 * @author Devanand
 * 
 *	Class Name 		: KeyDisplayActivity
 *
 *	Data Members	:
 *						* AboutButton		: Button - private
 *						* ExitButton		: TextView - private
 *						* TAG				: String - private, static, final
 *						* keyText			: String - private, static
 *						* keyGenerator		: NewKeyGenerator - private
 *						* dbAdapter			: DataManipulator - private
 *						* configFile		: SharedPreferences
 *						* configFileEditor 	: SharedPreferences.Editor
 *
 *	Member Methods	:
 *						* onCreate(Bundle) 			: void - public, override
 *						* SavePreferences(int[]) 	: void - private
 *						* LoadPreferences() 		: void - private
 *						* void ShowAbout() 			: void - private
 *
 *	Description 	:
 *
 *	The KeyDisplayActivity class defines the most important Activity of the application. This activity
 *	generates the new key using keyGenerator (getNewKey()), checks the uniqueness of the new key using dbAdapter
 *	(checkIfExists()) and records the new key to the database for future reference. It also retrieves settings
 *	needed by the key generation algorithm and also saves the same during the key generation process (using
 *	SharedPreferences).
 *
 ***/

public class KeyDisplayActivity extends Activity {
	
		// UI Elements : About Button, Exit Button and TextView to display generated key
	private Button AboutButton;
	private Button ExitButton;
	private TextView KeyDisplay;
	
		//	TAG is used for logging application activities in LogCat, it identifies the
		//	class that created the log entry in LogCat	
	private static final String TAG = "KeyDisplayActivity";
	
		//	KeyText : String - stores the Key generated by the keyGenerator
	private static String keyText="";
	
		//	keyGenerator : NewKeyGenerator - An object of NewKeyGenerator class, used for generating new key
	private EncryptionKeyGenerator keyGenerator;
	
		//	dbAdapter : DataManipulator - Object of the DataManipulator class, used to store and retrieve generated keys
		//								to and from the database. It also provides functions to check if a key already exists in the DB.
	private DataManipulator dbAdapter;
	
		//	ConfigFileName : String - Stores the file name for the settings file which stores settings relevant to the
		//							  key generation algorithm
	private static final String configFileName = "keyGenConfig";
	
		//	configFile : SharedPreferences - It is used to store the settings required to initialize the variables
		//									 of the encryption key generation algorithm 
		//									 (cipherTableToUse, cTableToUse, cTableIndex)
	SharedPreferences configFile;
	
		//	keyGenSettings : int[] - This array stores the settings for the key generation algorithm from sharedPreferences
		//							 and passes it on to the algorithm through the NewKeyGenerator class constructor
	private static int[] keyGenSettings = new int[3];
	
		// configFileEditor : SharedPreferences.Editor - Editor to provide access to the sharedPreferences object
	SharedPreferences.Editor configFileEditor;
	
	public void onCreate(Bundle savedInstanceState) {
		//---	onCreate is called when the Activity class is started using StartActivity() method
		Log.d(TAG, "Inside OnCreate in KeyDisplayActivity class");
        super.onCreate(savedInstanceState);
        
        //---	The following two lines of code provides a fullscreen interface window for the activity
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        
        //---	The UI for the activity is set to keydisplayview.xml
        setContentView(R.layout.keydisplayview);	
        
        //--- 	The UI elements for AboutButton, ExitButtion, KeyDisplay are referenced to 
        //	  	their respective counterparts in the keydisplayview.xml file using their ID
        AboutButton = (Button) findViewById(R.id.AboutButton);
        ExitButton = (Button) findViewById(R.id.ExitButton);
        KeyDisplay = (TextView) findViewById(R.id.textView2);
        
        //--- 	The dbAdapter object is initialized in the following step with the context of the current activity
        this.dbAdapter = new DataManipulator(this);
        
        //--- 	The LoadPreferences() method is used to read the application settings stored in the configuration
        //		file "keyGenConfig" using the SharedPreferences class into the array keyGenSettings[]
        LoadPreferences();
        
        //---	The keyGenerator object is initialized using the settings retrieved into keyGenSettings[] in the
        //		previous step
        keyGenerator = new EncryptionKeyGenerator(keyGenSettings[0],keyGenSettings[1], keyGenSettings[2]);
        
        Log.d(TAG, "Going to get last key");
        //---	The next step calls the getNewKey() function from the NewKeyGenerator class. It accepts an input
        //		value of type string (last key stored in database) that is retrieved from the database using the
        //		getLastEntry() method defined by the DataManipulator class
        keyText = keyGenerator.getNewKey(this.dbAdapter.getLastEntry());
        Log.d(TAG, "read last key from db");
        
        //--- 	The following while loop checks if the newly generated key stored in "keyText" already exists in the
        //		database. If it exists, it calls the getNewKey() method again to regenerate the key. The loop runs
        //		repeatedly until the generated key is unique. CheckIfExists() method, defined in DataManipulator class,
        //		returns a boolean value (true if the key already exist in database, else it returns false)
        while(this.dbAdapter.CheckIfExists(keyText))
        {
        	keyText = keyGenerator.getNewKey(keyText);
        }
        
        //---	SavePreferences() method writes the current Algorithm Settings into the preferences file "keyGenConfig"
        //		The getAlgorithmSettings() method, defined by the NewKeyGenerator class, passed as argument to the
        //		method returns an integer array containing the current settings of the algorithm
        SavePreferences(EncryptionKeyGenerator.getAlgorithmSettings());
        
        //---	The insert() method is called to store the new key into the database. The method is defined by the 
        //		DataManipulator class and takes a single string argument containing the key to be stored
        this.dbAdapter.insert(keyText);
        
        //---	Sets the new key to be displayed by the application. KeyDisplay is referenced to the TextView in
        //		keydisplayview.xml
        KeyDisplay.setText(keyText);
        
        Log.d(TAG, "All initialization conditions met successfully. New key generated.");
        
        //---	The AboutButton.setOnClickListener defines a listener method for the AboutButton in the keydisplayview.xml 
        //		file.The listener handles event generated by clicking the About button in the interface and redirects the
        //		user to the AboutUsActivity activity
       AboutButton.setOnClickListener(new View.OnClickListener() {
			
			public void onClick(View v) {
				try
				{
					Log.d(TAG,"Before ShowAbout method call in onClick");
					//---	ShowAbout() method is called when the about button is clicked to redirect the user
					//		to the AboutUsActivity activity
					ShowAbout();
					Log.d(TAG,"After ShowAbout method call in onClick");
				}
				catch(Exception e)
				{
					
				}
				
			}
		});	//	 End of setOnClickListener()
        
       //---	The ExitButton.setOnClickListener() method defines a listener method for the ExitButton in the 
       //		keydisplayview.xml file. The listener handles event generated by clicking the Exit button in the
       //		interface and exits the activity upon invocation
        ExitButton.setOnClickListener(new View.OnClickListener() {
			
			public void onClick(View v) {
				Log.d(TAG,"Exiting KeyDisplayActivity");
				finish();	//	finish() method exits the activity and returns system control to the parent
							//	(here, control is handed back to the EncryptionKeyGeneratorApplicationActivity
			}
		});	//	End of setOnClickListener()
	} //	End of onCreate() method
	
	
	//---	The SavePreferences() method is defined below
	//		The method takes an integer array algorithmSettings[] as argument and stores it in the
	//		preference file "keyGenConfig"
	private void SavePreferences(int[] algorithmSettings) {
		Log.d(TAG, "Saving Algorithm Settings...");
				
		configFile = getSharedPreferences(configFileName,0);	//		The argument 0 defines that the data be written in PRIVATE_MODE
		configFileEditor = configFile.edit();					//		Getting an editor for the configFile
		configFileEditor.putInt("cipherTableToUse", algorithmSettings[0]);
		configFileEditor.putInt("cTableToUse", algorithmSettings[1]);
		configFileEditor.putInt("cTableIndex", algorithmSettings[2]);
		configFileEditor.commit();								//		Finalizing changes made to the configFile
	} //	End of SavePreferences()

	
	//---	The LoadPreferences() method is defined below
	//		The method reads the settings stored in "keyGenConfig" file and initializes keyGenSettings[] array
	private void LoadPreferences() {
		configFile = getSharedPreferences(configFileName,0);
		keyGenSettings[0] = configFile.getInt("cipherTableToUse", 1);
		keyGenSettings[1] = configFile.getInt("cTableToUse", 1);
		keyGenSettings[2] = configFile.getInt("cTableIndex", 0);
		
		Log.d(TAG, "Retrieving Algorithm Settings...");
		
	} //	End of LoadPreferences()
	
	//---	ShowAbout() method is used to start the AboutUsActivity when the about button is clicked
	private void ShowAbout()
	{
		Log.d(TAG, "Handling button click for ABOUT in KeyDisplayActivity...Creating Intent");
		Intent AboutView = new Intent(this, AboutUsActivity.class);	// Defining new intent for activity
		Log.d(TAG, "Handling button click for ABOUT in KeyDisplayActivity...Starting AboutUsActivity");
		startActivity(AboutView);	// Starting the AboutUsActivity using AboutView intent
	} // End of ShowAbout()

} // End of KeyDisplayActivity class
